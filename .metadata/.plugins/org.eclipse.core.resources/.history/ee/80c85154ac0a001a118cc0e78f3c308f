package classes;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;

import java.io.File;
import java.io.IOException;
import java.util.List;

public abstract class Banque {
    public static List<Compte> listAcc;
    ObjectMapper objectMapper = new ObjectMapper();
    
	// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Route du fichier à changer !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	File file = new File("c:\\Users\\Dorian\\CashManager\\Comptes.json");
	// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Route du fichier à changer !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    public Banque() throws IOException {
        getAllComptes();
    }

    public void getAllComptes() throws IOException {
        listAcc = objectMapper.readValue(file, new TypeReference<List<CompteController>>(){});
        for(Compte acc : listAcc) {
            System.out.println("Numero "+ acc.getNumero()+" / Solde : "+acc.getSolde());
        }
    }

    public Compte getCompte(String numero){
        for(Compte acc : listAcc) {
            if(acc.getNumero().equals(numero)){
                return acc;
            }
        }

        return new Compte();
    }

    public String validation(Validation val) throws IOException {
        Compte compte = getCompte(val.getCompte());
        System.out.println("Client : "+val.getCompte());
        System.out.println("Compte : "+compte.getNumero());
        if(val.getCompte().equals(compte.getNumero())) {
            if(val.getMontant() < compte.getSolde()) {
                if(!compte.getBloque()){
                    changeSolde(compte.getNumero(), compte.getSolde() - val.getMontant());
                    return "Paiment accepté";
                }
                return "Carte bloquée";
            }
            return "Solde insuffisant";
        }
        return "Mauvais compte";
    }

    public void changeSolde(String numero, int montant) throws IOException {
        listAcc = objectMapper.readValue(file, new TypeReference<List<Compte>>(){});
        for(Compte acc : listAcc) {
            if(acc.getNumero().equals(numero))
                acc.setSolde(montant);
            String message = objectMapper.writerWithView(Compte.class).writeValueAsString(acc);
        }

        objectMapper.enable(SerializationFeature.INDENT_OUTPUT);
        objectMapper.writeValue(file, listAcc);

        getAllComptes();
    }
}